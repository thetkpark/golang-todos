basePath: /
definitions:
  controllers.ErrorMessage:
    properties:
      message:
        type: string
    type: object
  controllers.NewTodoDto:
    properties:
      title:
        type: string
    required:
      - title
    type: object
  controllers.TokenResponseDto:
    properties:
      token:
        type: string
    type: object
  controllers.UserCredentialDto:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Todo:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_finished:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
host: localhost:5000
info:
  contact: {}
  description: This is a sample of API server that store todos
  license:
    name: MIT
  title: Swagger Golang Todo API
  version: "1.0"
paths:
  /api/regis:
    post:
      consumes:
      - application/json
      parameters:
      - description: username and password to create user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserCredentialDto'
      produces:
      - application/json
      responses:
        "201":
          description: the user is register and token is given back
          schema:
            $ref: '#/definitions/controllers.TokenResponseDto'
        "400":
          description: Missing some attribute or username is in used
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
      summary: Register the new user
      tags:
      - auth
  /api/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: username and password to login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserCredentialDto'
      produces:
      - application/json
      responses:
        "201":
          description: the user is login and token is given back
          schema:
            $ref: '#/definitions/controllers.TokenResponseDto'
        "400":
          description: Missing some attribute or invalid credential
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
      summary: Login the user
      tags:
      - auth
  /api/todo:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: the list of todos that user have
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "401":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
      security:
        - JwtAuth: [ ]
      summary: Get all todos
      tags:
        - todo
    post:
      consumes:
        - application/json
      parameters:
        - description: title of todo to create
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/controllers.NewTodoDto'
      produces:
        - application/json
      responses:
        "201":
          description: the list of todos that user have
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "401":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
      security:
        - JwtAuth: [ ]
      summary: Create todo
      tags:
        - todo
  /api/todo/{todoId}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: id of todo to delete
          in: path
          name: todoId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: the list of todos that user have
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "401":
          description: ""
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
      security:
        - JwtAuth: [ ]
      summary: Delete todo
      tags:
        - todo
    patch:
      consumes:
        - application/json
      parameters:
        - description: id of todo that finished
          in: path
          name: todoId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: the list of todos that user have
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "401":
          description: ""
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorMessage'
      security:
        - JwtAuth: [ ]
      summary: Finish todo
      tags:
        - todo
securityDefinitions:
  JwtAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
